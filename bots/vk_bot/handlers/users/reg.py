import time
from vkbottle.tools.dev_tools.keyboard.action import Callback
from vkbottle.tools.dev_tools.keyboard.color import KeyboardButtonColor
from vkbottle.tools.dev_tools.mini_types.bot import message
from vkbottle_types.events.bot_events import MessageEvent
from vkbottle_types.events.enums.group_events import GroupEventType

from vkbottle_types.methods import users

from db.models import VKUserModel, GroupNames
from vkbottle_types.objects import MessagesConversation
from vkbottle.bot import Blueprint, Message, rules
from vkbottle_types import BaseStateGroup, GroupTypes
from config import API_URL, AUTH_HEADER
from vkbottle import Keyboard, Text, TemplateElement, template_gen, keyboard
from pprint import pprint
import json
import httpx

bp = Blueprint("UserBot")
bp.labeler.vbml_ignore_case = True

#### –ö–õ–ê–í–ò–ê–¢–£–†–´ ####
first_keyboard = Keyboard(one_time=True, inline=False)
for index, spec in enumerate(GroupNames):
    first_keyboard.add(Callback(spec.value, {'cmd': 'click'}))
    if index % 3 == 0:
        first_keyboard.row()

second_keyboard = Keyboard(one_time=True, inline=False).add(Text("AAAAAAAAAAAAAAA"))
    

#### –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ####
@bp.on.private_message(text=["/start", "–Ω–∞—á–∞—Ç—å"])
async def start(message: Message):
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å.", keyboard=first_keyboard)


@bp.on.raw_event(GroupEventType.MESSAGE_EVENT, dataclass=MessageEvent)
async def start(message: GroupEventType.MESSAGE_EVENT):
    print(message.object.payload)
    await bp.api.messages.send(
        random_id=0,
        message= "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.",
        keyboard= second_keyboard,
        event_id=message.object.event_id,
        peer_id=message.object.peer_id,
        user_id=message.object.user_id,
    )
    
    # await message.ctx_api.messages.send_message_event_answer(
    # event_id=message.object.event_id,
    # peer_id=message.object.peer_id,
    # user_id=message.object.user_id,
    # event_data='{"type": "show_snackbar", "text": "–†–∞–±–æ—Ç–∞–µ—Ç!"}',
    # )


@bp.on.private_message(text=["/set_group", "/set_group <group>", "/–≥—Ä—É–ø–ø–∞", "/–≥—Ä—É–ø–ø–∞ <group>"])
async def set_group(message: Message, group: str = None):
    async with httpx.AsyncClient(headers=AUTH_HEADER) as client:
        groups = await client.get(f"{API_URL}/groups")
        user = await get_user_info(message, group)

        if group in groups.json()["Groups"]:
            await client.post(f"{API_URL}/vk/users", json=user.dict())
            await client.post(f"{API_URL}/vk/users/set_group", json={"lesson_group": group, "users_id": [user.id]})
            await message.answer(f"–ì—Ä—É–ø–ø–∞ {group} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            await message.answer(f"–ì—Ä—É–ø–ø–∞ {group} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


@bp.on.private_message(text=["/timetable", "/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"])
async def send_changes(message: Message):
    async with httpx.AsyncClient(headers=AUTH_HEADER) as client:
        group = await client.get(f"{API_URL}/vk/users?id={message.peer_id}")

        if group.status_code == 200:
            group = group.json()[0]

            if group["lesson_group"]:
                changes = await client.get(f"{API_URL}/finalize_schedule/{group['lesson_group']}?text=true")
                for change in changes.json():
                    await message.answer(change)
            else:
                await message.answer("–£—á–µ–±–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ /set_group –≥—Ä—É–ø–ø–∞")
        else:
            await message.answer("–£—á–µ–±–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ /set_group –≥—Ä—É–ø–ø–∞")


@bp.on.private_message(text=["/help", "/–ø–æ–º–æ—â—å"])
async def help(message: Message):
    await message.answer(f"""
    üë®‚Äçüéì –ó–∞–¥–∞—Ç—å –≥—Ä—É–ø–ø—É:\n      /set_group <–≥—Ä—É–ø–ø–∞>\n      /–≥—Ä—É–ø–ø–∞ <–≥—Ä—É–ø–ø–∞>\n\nüìö –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n      /timetable\n      /—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ""")


#### –§–£–ù–ö–¶–ò–ò ####
async def get_user_info(message: Message, lessons_group: str = None) -> VKUserModel:
    user_info = await bp.api.users.get(message.from_id)
    temp = user_info[0].dict()
    temp.update({"lesson_group": lessons_group})
    temp = VKUserModel.parse_obj(temp)
    temp.join = int(time.time())
    temp.peer_id = message.peer_id
    return temp
